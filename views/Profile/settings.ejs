<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
    <!-- DataTables CSS -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.7/css/jquery.dataTables.min.css">

    <!-- RowReorder CSS -->
    <link rel="stylesheet" href="https://cdn.datatables.net/rowreorder/1.4.1/css/rowReorder.dataTables.min.css">

    <!-- Responsive CSS -->
    <link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.5.0/css/responsive.dataTables.min.css">
    <!-- DataTables JS -->
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>

    <!-- RowReorder JS -->
    <script src="https://cdn.datatables.net/rowreorder/1.4.1/js/dataTables.rowReorder.min.js"></script>

    <!-- Responsive JS -->
    <script src="https://cdn.datatables.net/responsive/2.5.0/js/dataTables.responsive.min.js"></script>
<style>
#loading-spinner {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    border: 6px solid #f3f3f3;
    border-top: 6px solid #3498db;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
.breadcrumb-chevron {
  --bs-breadcrumb-divider: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%236c757d'%3E%3Cpath fill-rule='evenodd' d='M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z'/%3E%3C/svg%3E");
  gap: .5rem;
}
.breadcrumb-chevron .breadcrumb-item {
  display: flex;
  gap: inherit;
  align-items: center;
  padding-left: 0;
  line-height: 1;
}
.breadcrumb-chevron .breadcrumb-item::before {
  gap: inherit;
  float: none;
  width: 1rem;
  height: 1rem;
}

.breadcrumb-custom .breadcrumb-item {
  position: relative;
  flex-grow: 1;
  padding: .75rem 3rem;
}
.breadcrumb-custom .breadcrumb-item::before {
  display: none;
}
.breadcrumb-custom .breadcrumb-item::after {
  position: absolute;
  top: 50%;
  right: -25px;
  z-index: 1;
  display: inline-block;
  width: 50px;
  height: 50px;
  margin-top: -25px;
  content: "";
  background-color: var(--bs-tertiary-bg);
  border-top-right-radius: .5rem;
  box-shadow: 1px -1px var(--bs-border-color);
  transform: scale(.707) rotate(45deg);
}
.breadcrumb-custom .breadcrumb-item:first-child {
  padding-left: 1.5rem;
}
.breadcrumb-custom .breadcrumb-item:last-child {
  padding-right: 1.5rem;
}
.breadcrumb-custom .breadcrumb-item:last-child::after {
  display: none;
}



</style>
<div id="loading-spinner"></div>


<div id="content" style="display: none;" class="container mt-3">
  <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="https://bloomnetwork.online/">Home</a></li>
          <li class="breadcrumb-item"><a href="https://bloomnetwork.online/Profile">Profile</a></li>
          <li class="breadcrumb-item active" aria-current="page">Settings</li>
      </ol>
  </nav>
  <div id="liveAlertPlaceholder"></div>
  <div class="card mb-3">
      <div class="card-body">
          <div class="row">
              <div class="col-md-12 ">
                  <h3>Discord Settings</h3>
                  <div class="form-group">
                    <label class="input-group mb-2"for="discord">Go to Discord > User Settings > Advanced and enable Developer mode, then go back to the bottom left corner on your profile tag, left-click and press "Copy Discord ID"</label>
                    <div class="mb-1 row">
                        <label for="staticEmail" class="col-sm-2 col-form-label">Linked account</label>
                        <div class="col-sm-10">
                            <input type="text" readonly class="form-control-plaintext" id="staticDiscordId" value="Not Linked">
                        </div>
                    </div>
                
                    <div class="input-group mb-2">
                        <span class="input-group-text" id="discordId">Discord ID</span>
                        <input id="discordIdInput" type="text" class="form-control" placeholder="696481341566615664" aria-label="Username" aria-describedby="basic-addon1">
                    </div>
                    <label class="input-group mb-2" for="discord">
                      <i>If you don't link your account you won't be able to receive raid alerts on Discord.</i>
                  </label>
                    <button id="updateDiscord" type="button" class="btn btn-success float-end mb-2">Update</button>
                </div>
                
              </div>
              
          </div>
      </div>
  </div>

  <div class="card mb-3">
    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                <h3>Skin Settings</h3>
                <div class="form-group">
                  <label class="input-group mb-2"for="discord">You can choose any skin you ever seen on the market or equipped in any player in the entire game. We see this as a way of actually experiencing different skins before buying them for real as game offers no 3D viewer for such</label>

                    <!-- Hat Selector -->
                    <label for="hat">Hat</label>
                    <input list="hatOptions" id="hat" class="form-control mb-2" placeholder="Select or type a hat">
                    <datalist id="hatOptions">
                    </datalist>
                    <label for="mask">Mask</label>
                    <input list="maskOptions" id="mask" class="form-control mb-2" placeholder="Select or type a mask">
                    <datalist id="maskOptions">
                    </datalist>
                    <label for="glasses">Glasses</label>
                    <input list="glassesOptions" id="glasses" class="form-control mb-2" placeholder="Select or type glasses">
                    <datalist id="glassesOptions">
                    </datalist>
                    <label for="vest">Vest</label>
                    <input list="vestOptions" id="vest" class="form-control mb-2" placeholder="Select or type a vest">
                    <datalist id="vestOptions">
                    </datalist>
                    <label for="backpack">Backpack</label>
                    <input list="backpackOptions" id="backpack" class="form-control mb-2" placeholder="Select or type a backpack">
                    <datalist id="backpackOptions">
                    </datalist>

                    <!-- Pants Selector -->
                    <label for="pants">Pants</label>
                    <input list="pantsOptions" id="pants" class="form-control mb-2" placeholder="Select or type pants">
                    <datalist id="pantsOptions">
                    </datalist>

                    <!-- Shirt Selector -->
                    <label for="shirt">Shirt</label>
                    <input list="shirtOptions" id="shirt" class="form-control mb-2" placeholder="Select or type a shirt">
                    <datalist id="shirtOptions">
                    </datalist>
                    <label class="input-group mb-2" for="discord">
                      <i>This is only available for VIP members and these skins are only given and seen on our servers.</i>
                  </label>
                    <button id="updateSkins" type="button" class="btn btn-success float-end mb-2">Update</button>
                </div>
            </div>
        </div>
    </div>
</div>



  
  
</div>


<script>
  $(document).ready(function () {

      $("#loading-spinner").show();


let econInfoData;


const types = {
    hat: [],
    mask: [],
    glasses: [],
    vest: [],
    backpack: [],
    pants: [],
    shirt: []
};


async function fetchEconInfoData() {
    try {
        const response = await fetch('https://bloomnetwork.online/EconInfo.json');
        econInfoData = await response.json();
    } catch (error) {
        console.error('Error fetching EconInfo data:', error);
    }
}


async function fetchAndPopulateSkins() {
    try {
        const response = await fetch('https://api.bloomnetwork.online/skins/get?steamid=<%= user.id %>');
        const skinData = await response.json();

        for (const type in skinData) {
            const selectedSkinId = skinData[type];
            const selectedSkinName = getSkinName(selectedSkinId);
            $(`#${type.toLowerCase()}`).val(selectedSkinName);
        }


        populateOptions();

        $("#content").show();
    } catch (error) {
        console.error('Error fetching skin data:', error);
    }
}

function getSkinName(skinId) {
    const skin = econInfoData.find(item => item.itemdefid === skinId);
    return skin ? skin.name : '';
}

function populateOptions() {
    econInfoData.forEach(item => {
        for (const type in types) {
            if (item.type.toLowerCase().includes(type)) {
                types[type].push(item.name);
            }
        }
    });

    for (const type in types) {
        const datalist = document.getElementById(`${type}Options`);
        types[type].forEach(option => {
            const optionElement = document.createElement('option');
            optionElement.value = option;
            datalist.appendChild(optionElement);
        });
    }
}
fetchEconInfoData().then(fetchAndPopulateSkins);
$("#updateSkins").click(function () {
    const selectedSkins = {};
    for (const type in types) {
        const selectedSkinName = $(`#${type.toLowerCase()}`).val();
        const skin = econInfoData.find(item => item.name === selectedSkinName);
        if (skin) {
            selectedSkins[type] = skin.itemdefid;
        }
    }
    fetch('https://api.bloomnetwork.online/skins/set', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            SteamID: '<%= user.id %>',
            Hat: selectedSkins.hat || 0,
            Mask: selectedSkins.mask || 0,
            Glasses: selectedSkins.glasses || 0,
            Shirt: selectedSkins.shirt || 0,
            Vest: selectedSkins.vest || 0,
            Backpack: selectedSkins.backpack || 0,
            Pants: selectedSkins.pants || 0
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        console.log(data);
    })
    .catch(error => {
        console.error('Error:', error);
    });
});




      
      const alertPlaceholder = document.getElementById('liveAlertPlaceholder')
      const appendAlert = (message, type) => {
          const wrapper = document.createElement('div')
          wrapper.innerHTML = [
              `<div class="alert alert-${type} alert-dismissible" role="alert">`,
              `   <div>${message}</div>`,
              '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
              '</div>'
          ].join('')
          alertPlaceholder.append(wrapper)
      }

      const alertTrigger = document.getElementById('updateDiscord')
      if (alertTrigger) {
          alertTrigger.addEventListener('click', () => {
              appendAlert('Discord ID updated', 'success')
          })
      }

      $.ajax({
          url: 'https://api.bloomnetwork.online/discord/isLinked?steamid=<%= user.id %>',
          method: 'GET',
          dataType: 'json',
          success: function (data) {
              console.log(data)
              if (data.linked == true) $("#staticDiscordId").val(data.discordId)

          },
          error: function (error) {
              console.error('Error fetching data:', error);
          }
      });

      $("#updateDiscord").click(function () {
          var discordId = $("#discordIdInput").val();
          if (discordId.length == 0) return;
          var steamId = "<%= user.id %>"
          $.ajax({
              url: "https://api.bloomnetwork.online/discord/link",
              type: "POST",
              contentType: 'application/json',
              data: JSON.stringify({ SteamId: steamId, DiscordId: discordId }),
              success: function (response) {
                  $("#staticDiscordId").val(discordId)
              },
              error: function (xhr, status, error) {
                  // Handle error response
                  console.error("Error:", error);
              }
          });
      });
  });
</script>

